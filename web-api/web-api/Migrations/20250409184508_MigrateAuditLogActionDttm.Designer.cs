// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using web_api.Models;

#nullable disable

namespace web_api.Migrations
{
    [DbContext(typeof(FMSContext))]
    [Migration("20250409184508_MigrateAuditLogActionDttm")]
    partial class MigrateAuditLogActionDttm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("web_api.Models.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Account unique identification");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"));

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("User selected Icon type (Font Awesome icon type)");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(19, 4)")
                        .HasComment("Money count on the account at the account creation moment");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("User defined account name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("User unique identification with reference to User table");

                    b.HasKey("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("web_api.Models.AuditLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Log unique identification");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComment("Log text");

                    b.Property<DateTime>("ActionDttm")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAdress")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasComment("Log creation DateTime");

                    b.HasKey("LogId")
                        .HasName("PK_Log");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("web_api.Models.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Category unique identification");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("User selected Icon type (Font Awesome icon type)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("User defined category name");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasComment("Category type with reference to CategoryType table");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("User unique identification with reference to User table");

                    b.HasKey("CategoryId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("web_api.Models.CategoryType", b =>
                {
                    b.Property<byte>("CategoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasComment("CategoryType unique identification");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("CategoryTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("CategoryType Name");

                    b.HasKey("CategoryTypeId");

                    b.ToTable("CategoryType", (string)null);
                });

            modelBuilder.Entity("web_api.Models.Transaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Transaction unique identification");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasComment("Account unique identification with reference to Account table");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19, 4)")
                        .HasComment("Transaction money amount");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasComment("Category unique identification with reference to Category table");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Transaction comment");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime")
                        .HasComment("Transaction DateTime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("User unique identification with reference to User table");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("web_api.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("User unique identification");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("User Email, unique value");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)")
                        .HasComment("Password Hash");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Email" }, "IX_UserEmail_Unique")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("web_api.Models.Account", b =>
                {
                    b.HasOne("web_api.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Account_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("web_api.Models.AuditLog", b =>
                {
                    b.HasOne("web_api.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AuditLogs_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("web_api.Models.Category", b =>
                {
                    b.HasOne("web_api.Models.CategoryType", "TypeNavigation")
                        .WithMany("Categories")
                        .HasForeignKey("Type")
                        .IsRequired()
                        .HasConstraintName("FK_Category_CategoryType");

                    b.HasOne("web_api.Models.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Category_User");

                    b.Navigation("TypeNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("web_api.Models.Transaction", b =>
                {
                    b.HasOne("web_api.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_Account");

                    b.HasOne("web_api.Models.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_Category");

                    b.HasOne("web_api.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_User");

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("web_api.Models.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("web_api.Models.Category", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("web_api.Models.CategoryType", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("web_api.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("AuditLogs");

                    b.Navigation("Categories");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
