// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace web_api.Models;

public partial class FMSContext : DbContext
{
    public FMSContext(DbContextOptions<FMSContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<AuditLog> AuditLogs { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<CategoryType> CategoryTypes { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.ToTable("Account");

            entity.Property(e => e.AccountId).HasComment("Account unique identificator");
            entity.Property(e => e.Icon)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("User selected Icon type (Font Awesome icon type)");
            entity.Property(e => e.InitialBalance)
                .HasComment("Money count on the account at the account creation moment")
                .HasColumnType("decimal(19, 4)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("User defined account name");
            entity.Property(e => e.UserId).HasComment("User unique identificator with reference to User table");

            entity.HasOne(d => d.User).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Account_User");
        });

        modelBuilder.Entity<AuditLog>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PK_Log");

            entity.Property(e => e.LogId).HasComment("Log unique identificator");
            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(1024)
                .HasComment("Log text");
            entity.Property(e => e.IpAdress)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Timespam)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.UserId).HasComment("Log creation DateTime");

            entity.HasOne(d => d.User).WithMany(p => p.AuditLogs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AuditLogs_User");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.ToTable("Category");

            entity.Property(e => e.CategoryId).HasComment("Category unique identificator");
            entity.Property(e => e.Icon)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("User selected Icon type (Font Awesome icon type)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("User defined category name");
            entity.Property(e => e.Type).HasComment("Category type with reference to CategoryType table");
            entity.Property(e => e.UserId).HasComment("User unique identificator with reference to User table");

            entity.HasOne(d => d.TypeNavigation).WithMany(p => p.Categories)
                .HasForeignKey(d => d.Type)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Category_CategoryType");

            entity.HasOne(d => d.User).WithMany(p => p.Categories)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Category_User");
        });

        modelBuilder.Entity<CategoryType>(entity =>
        {
            entity.ToTable("CategoryType");

            entity.Property(e => e.CategoryTypeId)
                .ValueGeneratedOnAdd()
                .HasComment("CategoryType unique identificator");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("CategoryType Name");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.ToTable("Transaction");

            entity.Property(e => e.TransactionId).HasComment("Tranzaction unique identificator");
            entity.Property(e => e.AccountId).HasComment("Account unique identificator with reference to Account table");
            entity.Property(e => e.Amount)
                .HasComment("Tranzaction money amount")
                .HasColumnType("decimal(19, 4)");
            entity.Property(e => e.CategoryId).HasComment("Category unique identificator with reference to Category table");
            entity.Property(e => e.Comment)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("Tranzaction comment");
            entity.Property(e => e.CreatedDateTime)
                .HasComment("Tranzaction DateTime")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasComment("User unique identificator with reference to User table");

            entity.HasOne(d => d.Account).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Transaction_Account");

            entity.HasOne(d => d.Category).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Transaction_Category");

            entity.HasOne(d => d.User).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Transaction_User");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.HasIndex(e => e.Email, "IX_UserEmail_Unique").IsUnique();

            entity.Property(e => e.UserId).HasComment("User unique identificator");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("User Email, uniqe value");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(64)
                .HasComment("Password Hash");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}